/*Membership in a set*/
mem(_,[]) :- fail. 
mem(X,[X|_]).
mem(X,[_|R]) :- mem(X,R).


/*  del(X,L1,L2) -- delete element X from a list L1 to obtain L2 */ 
del(_, [ ] , [ ]) :- !.
del(X, [X|R], Z) :- !, del(X, R, Z).
del(X, [Y|R], [Y|Z]) :- del(X, R, Z).
  
/*  remdups(L, L1) remove duplicates from a list L to get L1 */
remdups([ ], [ ]) :- !.
remdups([X|R], [X|Z]) :- del(X, R, L), remdups(L, Z).

/* Assuming no duplicates in S1, S2, here is an implementation of union of S1, S2 */
unionI([ ], S2, S2) :- !.
unionI(S1, [ ], S1) :- !.
unionI([X|R], S2, [X|Z]) :- del(X, S2, S3),  unionI(R, S3, Z).


/* append(L1, L2, L3) -- append lis  L1 to list L2 to get list  L3 */
append( [ ], L, L):-!.
append( [X|R], L, [X|Z]) :- append(R, L, Z).

/* mapcons(X,L1, L2) --  cons the element X to each list in L1 to get L2 */
mapcons(_, [ ], [ ]) :- !.
mapcons(X, [Y|R], [ [X|Y] | Z ]) :- mapcons(X, R, Z).

/* powerI( S, P1): Here is an implementation of powerset of S */
powerI([ ], [ [ ] ]):-!.
powerI([X|R], P) :- powerI(R, P1),  mapcons(X, P1, P2), append(P2, P1, P).

/* checkdup(S): To check if set S has dupicates */
checkdup(S1):- \+ remdups(S1,S1).
checkuniondup(S1,S2):- unionI(S1,S2,S3),!, checkdup(S3).


/*Intersection of two sets*/
interI([],_,[]):-!.
interI([X|S1],S2,S3):- mem(X,S2),interI(S1,S2,R), unionI([X],R,S3_),eqset(S3_,S3),!.
interI([X|S1],S2,S3):- \+ mem(X,S2), interI(S1,S2,S3_),eqset(S3_,S3),!.

/*Cartesian product of two sets*/
/*
cartesianI([],_,[]) :- !.
cartesianI(_,[],[]):- !.
cartesianI([X],[Y|S],Z):- cartesianI([X],S,L),unionI([(X,Y)],L,Z_),eqset(Z_,Z),!.
cartesianI([X|S],S2,S3):- cartesianI(S,S2,L1), cartesianI([X],S2,L2),unionI(L2,L1,S3_),eqset(S3_,S3). */

/*Difference of two sets*/
diffI([],_,[]):-!.
diffI(X,[],X):-!.
diffI([X|S1],S2,S3):- mem(X,S2),diffI(S1,S2,S3_),eqset(S3_,S3),!.
diffI([X|S1],S2,S3):- \+ mem(X,S2), diffI(S1,S2,L3), unionI([X],L3,S3_),eqset(S3_,S3), !.
/*TESTCASES FOR DIFFERENCE
Basic
?- diffI([1,2,3],[2,3,4],X).
X = [1].

Empty set tests
?- diffI([],[2,3,4],X).
X = [].

?- diffI([2,3,4],[],X).
X = [2, 3, 4].

Disjoint sets
?- diffI([1,2,3],[4,5,6],X).
X = [1, 2, 3].

To show order doesn't matter
?- diffI([1,2,3],[4,2],X).
X = [1, 3].

Single element
?- diffI([4],[4],X).
X = [].

Nested lists
?- diffI([[1, 2], [3, 4]], [[3, 4], [5, 6]], X).
X = [[1, 2]].
*/

/*To check if two powersets are equal*/
% eqset(S1,S2):-diffI(S1,S2,[]),diffI(S2,S1,[]).

eqset([],[]).
eqset(S,S).
eqset([X|S1],S2):- mem(X,S2), del(X,S2,S2_),eqset(S1,S2_),!.

getunion([],[]).
getunion([X|P],S):- getunion(P,S_),unionI(X,S_,S).

check_eq_powset(P1,P2):- getunion(P1,S1),getunion(P2,S2),eqset(S1,S2).
check_eq(S1,S2):- powerI(S1,P1),powerI(S2,P2),check_eq_powset(P1,P2).
/* We take union of all elements in the powerset and then check equality on the resulting sets.
TESTCASES
Empty sets
?- check_eq_powset([[]], [[]]).
true.

Different sets
?- check_eq_powset([[1], [2], [1, 2], []], [[]]).
false.
?- check_eq_powset([[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []],[[1], [2], [1, 2], []]).
false.

Different orders
?- check_eq_powset([[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3], []], [[], [1], [2], [3], [2,1], [3,1], [2, 3], [ 2, 3,1]]).
true.

?- check_eq_powset([[1], [2], [1, 2], []], [[],[2],[1],[2,1]]).
true.

?- check_eq([1,2,3],[3,1,2]).
true.

?- check_eq([1,2,3],[3,1,4]).
false.
*/




